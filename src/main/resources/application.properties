# MariaDB \uC124\uC815
#spring.datasource.driverClassName=org.mariadb.jdbc.Driver
#spring.datasource.url=jdbc:mariadb://localhost:3306/devktak
#spring.datasource.username=ktpark
#spring.datasource.password=safepc12@

# heroku ClearDB MySQL \uC124\uC815
#spring.datasource.driverClassName=org.mariadb.jdbc.Driver
#spring.datasource.url=jdbc:mysql://us-cdbr-east-04.cleardb.com/heroku_f251acd49da4d88?reconnect=true
#spring.datasource.username=b796fd34d3f0e4
#spring.datasource.password=ee054f39

# AWS RDS MariaDB \uC124\uC815
spring.datasource.driverClassName=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://docker-devktak-mariadb.cgnbrpnem3nl.ap-northeast-2.rds.amazonaws.com/devktak
spring.datasource.username=root
spring.datasource.password=password

# SMTP \uC124\uC815
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=qkrrudxkr77@gmail.com
spring.mail.password=nbhykcdzzwmgwmgk
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.starttls.enable=true

# SQL
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.show_sql=true
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type=TRACE
#spring.jpa.show-sql=true

#spring.jpa.database=mysql
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect


# \uAC1C\uBC1C\uD560 \uB54C\uC5D0\uB9CC create-drop \uB610\uB294 update\uB97C \uC0AC\uC6A9\uD558\uACE0 \uC6B4\uC601 \uD658\uACBD\uC5D0\uC11C\uB294 validate\uB97C \uC0AC\uC6A9
spring.jpa.hibernate.ddl-auto=update

# \uC6F9 \uC11C\uBC84 \uD638\uC2A4\uD2B8 (\uBA54\uC77C\uC5D0\uC11C \uD68C\uC6D0\uAC00\uC785 \uC644\uB8CC \uC2DC \uB9C1\uD06C \uD0C0\uB294 \uC6A9\uB3C4\uB85C \uC0AC\uC6A9)
#app.host=https://devktak.herokuapp.com
app.host=http://13.125.119.128:9292

server.port=9292

logging.level.root=error

# \uD30C\uC77C \uD558\uB098\uC758 \uCD5C\uB300 \uC0AC\uC774\uC988 (default 1MB)
spring.servlet.multipart.max-file-size=30MB
# \uBA40\uD2F0\uD30C\uD2B8 \uC694\uCCAD \uD558\uB098\uC5D0 \uC5EC\uB7EC \uD30C\uC77C\uC744 \uC5C5\uB85C\uB4DC \uD560 \uC218 \uC788\uB294\uB370, \uADF8 \uC804\uCCB4 \uD569\uC774\uB2E4 (default 10MB)
spring.servlet.multipart.max-request-size=30MB

# \uD074\uB77C\uC774\uC5B8\uD2B8 \uC694\uCCAD url\uC774 /gallery/\uB85C \uC2DC\uC791\uB420 \uACBD\uC6B0 C:/upload/\uB85C \uC694\uCCAD\uC744 \uC804\uB2EC\uD55C\uB2E4.
upload.path=/gallery/**
#resource.path=file:///C:/upload/
#resource.path=file:///home/ec2-user/
resource.path=file:///

# \uC5C5\uB85C\uB4DC \uD30C\uC77C \uC800\uC7A5 \uACBD\uB85C
save.path=/

############################## Kafka ##############################

# \uCE74\uD504\uCE74 \uC11C\uBC84 \uC815\uBCF4
spring.kafka.bootstrap-servers=13.125.119.128:9092
# \uCEE8\uC288\uBA38\uC758 \uADF8\uB8F9 id
spring.kafka.consumer.group-id=kafka-tak
# \uB370\uC774\uD130\uB97C \uC5B4\uB514\uAE4C\uC9C0 \uC77D\uC5C8\uB2E4\uB294 offset\uC744 \uC8FC\uAE30\uC801\uC73C\uB85C \uC800\uC7A5\uD560\uC9C0 \uC5EC\uBD80
spring.kafka.consumer.enable-auto-commit=true
# offset\uC5D0 \uC624\uB958\uAC00 \uC788\uC744 \uACBD\uC6B0 \uC5B4\uB514\uC11C\uBD80\uD130 \uB2E4\uC2DC \uD560\uC9C0 \uC5EC\uBD80 | ealiest: \uB9E8\uCC98\uC74C, latest: \uC774\uC804\uAEBC\uB294 \uBB34\uC2DC\uD558\uACE0 \uC774\uC81C\uBD80\uD130 \uB4E4\uC5B4\uC624\uB294 \uB370\uC774\uD130\uBD80\uD130 \uC77D\uAE30 \uC2DC\uC791\uD55C\uB2E4
spring.kafka.consumer.auto-offset-reset=latest
# \uB370\uC774\uD130\uB97C kafka\uB85C \uC804\uB2EC\uD560\uB54C \uC0AC\uC6A9\uD558\uB294 Key Encoder ClassStringSerializer\uB294 \uBB38\uC790\uC5F4 \uD615\uD0DC\uC758 \uB370\uC774\uD130\uC5D0\uB9CC \uC0AC\uC6A9 \uAC00\uB2A5
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# \uB370\uC774\uD130\uB97C kafka\uC5D0\uC11C \uBC1B\uC544\uC11C \uC0AC\uC6A9\uD558\uB294 Key Decoder ClassStringDeserializer\uB294 \uBB38\uC790\uC5F4 \uD615\uD0DC\uC758 \uB370\uC774\uD130\uC5D0\uB9CC \uC0AC\uC6A9 \uAC00\uB2A5
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# \uB370\uC774\uD130\uB97C kafka\uB85C \uC804\uB2EC\uD560\uB54C \uC0AC\uC6A9\uD558\uB294 Value Encoder ClassStringSerializer\uB294 \uBB38\uC790\uC5F4 \uD615\uD0DC\uC758 \uB370\uC774\uD130\uC5D0\uB9CC \uC0AC\uC6A9 \uAC00\uB2A5
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# \uB370\uC774\uD130\uB97C kafka\uC5D0\uC11C \uBC1B\uC544\uC11C \uC0AC\uC6A9\uD558\uB294 Value Decoder ClassStringDeserializer\uB294 \uBB38\uC790\uC5F4 \uD615\uD0DC\uC758 \uB370\uC774\uD130\uC5D0\uB9CC \uC0AC\uC6A9 \uAC00\uB2A5
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# counsumer\uAC00 \uD55C\uBC88\uC5D0 \uAC00\uC838\uC624\uB294 message \uAC2F\uC218
spring.kafka.consumer.max-poll-records=1000
# \uAE30\uBCF8 \uC124\uC815 topic name
spring.kafka.template.default-topic=kafka-tak
